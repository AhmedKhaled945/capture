% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/capture.R
\name{capture}
\alias{capture}
\title{Capture Screenshot as Image}
\usage{
capture(
  selector,
  filename,
  ...,
  format = c("png", "jpeg"),
  scale = NULL,
  options = list()
)
}
\arguments{
\item{selector}{A CSS selector, for example \code{body} to target the whole page or \verb{#<ID>} to target a specific output.}

\item{filename}{Name of the file (without extension) that will be created.}

\item{...}{Arguments passed to HTML button.}

\item{format}{Format of output between: \code{"png"} or \code{"jpeg"}.}

\item{scale}{Scale factor applied to image's dimension.}

\item{options}{Options (as a list) passed to \href{https://github.com/tsayen/dom-to-image}{domtoimage}
method, for example you can use \code{bgcolor} to set background color.}
}
\value{
an HTML tag.
}
\description{
Add a button to take a screenshot of a specified element and download a PNG file.
}
\note{
It's only possible to take screenshot of elements that are actually visible on screen. It doesn't work in Internet Explorer.
}
\examples{
library(shiny)
library(capture)

ui <- fluidPage(
  tags$h2("Capture example"),
  capture(
    selector = "body",
    filename = "all-page",
    icon("camera"), "Take screenshot of all page",
    format = "jpeg"
  ),
  tags$br(),
  fluidRow(
    column(
      width = 4,
      wellPanel(
        tags$b("Parameters :"),

        selectInput(
          inputId = "loi",
          label = "Law:",
          choices = c("normal", "uniform", "exponential")
        )
      )
    ),
    column(
      width = 8,
      tags$div(
        id = "result-block",
        tags$b("Results :"),
        plotOutput(outputId = "plot"),
        uiOutput(outputId = "mean"),
        verbatimTextOutput(outputId = "raw")
      ),
      capture(
        selector = "#result-block",
        filename = "results",
        icon("camera"), "Take screenshot of results",
        options = list(bgcolor = "#FFF")
      ),
      capture(
        selector = "#result-block",
        filename = "results",
        icon("camera"), "Take screenshot of results (bigger scale)",
        scale = 3,
        options = list(bgcolor = "#FFF")
      )
    )
  )
)

server <- function(input, output, session) {
  distrib_r <- reactive({
    switch(
      input$loi,
      "normal" = rnorm(1000),
      "uniform" = runif(1000),
      "exponential" = rexp(1000)
    )
  })

  output$plot <- renderPlot({
    hist(distrib_r())
  })

  output$mean <- renderUI({
    tags$p(tags$b("The mean is :"), round(mean(distrib_r()), 2))
  })

  output$raw <- renderPrint({
    summary(distrib_r())
  })
}

if (interactive())
  shinyApp(ui, server)
}
